import kc


kmers = ["AAATCGTGGAAACGGTTCGGGTCCAGC",
"CCATTATGATATCTGCCAGTTGCCACA",
"TGGGCGGTGTGATGACGACGCTGATCG",
"GCTATTCCGGCGTACCTTTGCCCTCCA",
"CGCCGTAGAAAATGCCCATGGCAAGAA",
"TTGGGGAATATATGCAGTATTGGGGAA",
"GCTAAGCTATCGTCGTATCCGTAACAC",
"GCTACCGTGAACGGTGCTACCTCCTTA",
"GGTATACGGGAAGGCAGGCATTGGCTG",
"CTGCTCGGTTTCCTCATCATCAAAATC",
"CGTTACCGTGCAAAGCAGCCTCGATGC",
"TGAATCTGTGTGGTGCACGCCGCACGG",
"TCGGCTTTGCCACGTCCCGCCAGTTCA",
"CCGGCGTTCCTTGATAACCCACGCATG",
"ATGCGAATGGCAGCATTCATATTGGTC",
"ATTTGCGCCATGGCAATGAAAAGCCAC",
"ACCCGTTAAAATGAAATATAAGAGACG",
"GAATGTATCAGCCGATGGTTCTACGAT",
"ACGCAAACTTTTTGCGAAGGTGGCGTG",
"GCTTTGATGAAAGCTTTTGGTGCGATG",
"CGCTGACGTTGCCCCATGTGAGCGTGA",
"AGTGCCGGACACATTGGATGTATGGTT",
"TCCGTGGTTGGCGCAGCGGAGGCGCTT",
"GTAACGGTGCGGGCTGACGCGTACAGG",
"CCAACCGTCTGGCGGAGCTGGCCCAGC",
"GCGCCGTTGTTCGACCACTTTATCGAG",
"TACGGTCGCCATATACAAGTAGTGCTG",
"AACCCGAAAAACGGTCGTCTGATTGTT",
"ATCCGCAAACACCAGATCGCTTTAGGG",
"GGTTCCCGCTGGCGCAATTGAAAACTT",
"TAATCGACGCCGGAAGGTTTGATCACA",
"ATATTTAACGACAGCGCGTGCAAATTG",
"TCATACTTTTTCCATTTCAATTAACCG",
"TCGCCGACCGGTTCGGTCAATGCCGCC",
"GCGTGGTGCCCAGCGGTTTCAACACCA",
"AACGCCTCAGAATACTTTACTGGGGCT",
"TGATCGAATAACTAATACGGTTCTCTG"]

def get_kmers( v, prefix = "" ):
    for uc_bkmer in v.get_uc().get_bkmers():
        yield prefix + uc_bkmer.get_seq()
    print 'cc'
    for cc in v.get_ccs():
        for clust_idx, sfc in enumerate( cc.get_suf_clust_data() ):
            for suffix in get_kmers( sfc.get_child_vertex(), cc.prefix_from_clust( clust_idx ) ):
                yield prefix + suffix

k = 27
kd = kc.Kdict( k, kc.calc_bk( k ) )

print 'Insert kmers'
for kmer in kmers:
    kd.insert( kmer )

print 'Check for kmers'
for kmer in kmers:
    print '\tkmer', kmer, 'contained', kd.contains( kmer )

for i, kmer in enumerate( get_kmers( kd.get_root() ) ):
    print i, kmer


